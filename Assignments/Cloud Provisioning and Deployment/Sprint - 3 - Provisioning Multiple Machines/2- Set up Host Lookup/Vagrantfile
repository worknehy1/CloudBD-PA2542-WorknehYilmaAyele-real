# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  #Multi-machine configuration
  config.vm.define "appserver" do |appserver|
 	appserver.vm.box = "hashicorp/precise64"
	appserver.vm.hostname = 'appserver'
	appserver.vm.network :private_network, ip: "192.168.0.5"
	appserver.vm.provision :shell, inline: "echo B"
  end

  config.vm.define "dbserver" do |dbserver|
	dbserver.vm.box = "hashicorp/precise64"
	dbserver.vm.hostname = 'dbserver'
	dbserver.vm.network :private_network, ip: "192.168.0.6"
	dbserver.vm.provision :shell, inline: "echo B"
  end

  config.vm.define "web" do |web|
	web.vm.box = "hashicorp/precise64"
	web.vm.hostname = 'web'
	#now that the port 8080 on your host is forwarded to port 80 on the webserver
	config.vm.network "forwarded_port", guest: 80, host: 8080, auto_correct: true
	web.vm.network :private_network, ip: "192.168.0.7"
	web.vm.provision :shell, inline: "echo B"
  	# Create a forwarded port mapping which allows access to a specific port
  	# within the machine from a port on the host machine and only allow access
  	# via 127.0.0.1 to disable public access
  	# config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  end
  def create_machine(config, machine_name, machine_ip)
    myvm = machine_name
    config.vm.define machine_name do |myvm|
     myvm.vm.box= "hashicorp/precise64"
     myvm.vm.hostname = machine_name
     myvm.vm.network :private_network, ip: machine_ip
     #,"192.168.0.#{i}")
    end
  end
 #https://github.com/hashicorp/vagrant/issues/2787
 for i in 0..2
   tst_name = "tst#{i}"
   create_machine(config, tst_name, "192.168.0.#{Integer(i)+2}") 
 end


  # Puppet: here I used the the following to enable provisioning with pupper. Puppet  manifests
  # is found in the directory "manifests" relative to this - so I already created the directory
  # and the file default.pp is found in this directory

  config.vm.provision "puppet" do |puppet|
	puppet.manifests_path="manifests"
	puppet.manifest_file="default.pp"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
