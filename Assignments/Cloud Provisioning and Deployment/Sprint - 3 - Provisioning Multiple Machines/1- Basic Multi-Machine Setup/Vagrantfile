# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "hashicorp/precise64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.'
  #Multi-machine configuration

  config.vm.define "appserver" do |appserver|
 	appserver.vm.box = "hashicorp/precise64"
	appserver.vm.hostname = 'appserver'
  end

  config.vm.define "dbserver" do |dbserver|
	dbserver.vm.box = "hashicorp/precise64"
	dbserver.vm.hostname = 'dbserver'
  end

  config.vm.define "web" do |web|
	web.vm.box = "hashicorp/precise64"
	web.vm.hostname = 'web'
	#now that the port 8080 on your host is forwarded to port 80 on the webserver
	config.vm.network "forwarded_port", guest: 80, host: 8080, auto_correct: true
  	# Create a forwarded port mapping which allows access to a specific port
  	# within the machine from a port on the host machine and only allow access
  	# via 127.0.0.1 to disable public access
  	# config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

   end
#my code was the one commented next to the following block of code
# the following block of code is taken from I'm stuck, please help me!
   for i in 0..2
    	tstconfig = "tst" + i.to_s
    	#puts "tstconfig " + tstconfig
    	config.vm.define tstconfig do |tstconfig|
    	tstconfig.vm.box = "hashicorp/precise64"
    	tstconfig.vm.hostname = "tst" + i.to_s
    	#puts "hostname " + tstconfig.vm.hostname
    end
  end  
#config.vm.define "tst0" do |tst0|
# 	tst0.vm.box = "hashicorp/precise64"
#	tst0.vm.hostname = 'tst0'
#  end
#  config.vm.define "tst1" do |tst1|
# 	tst1.vm.box = "hashicorp/precise64"
#	tst1.vm.hostname = 'tst1'
#  end
#  config.vm.define "tst2" do |tst2|
# 	tst2.vm.box = "hashicorp/precise64"
#	tst2.vm.hostname = 'tst2'
#  end


  # Puppet: here I used the the following to enable provisioning with pupper. Puppet  manifests
  # is found in the directory "manifests" relative to this - so I already created the directory
  # and the file default.pp is found in this directory

  config.vm.provision "puppet" do |puppet|
	puppet.manifests_path="manifests"
	puppet.manifest_file="default.pp"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
